h2. Description

Precalculation is a Ruby on Rails plugin that defines a mechanism for managing and populating an aggregate table stack to speed up ActiveRecord calculation queries on large datasets.


h2. Install

<pre>
	<code>
		git clone git://github.com/henrygarner/precalculation.git vendor/plugins/precalculation
	</code>
</pre>


h2. Usage

<pre>
	<code>
		ruby script/generate precalculation [model_class]
	</code>
</pre>

This will create the db/precalculation directory and a boilerplate class inheriting from ActiveRecord::Precalculation.

Next, define your precalculations. You can define as many as you wish.

<pre>
	<code>
		# Defined in db/precalculation/my_model_precalculation.rb
		
		class MyModelPrecalculation < ActiveRecord::Precalculation
		
			# Defines an aggregate table called 'aggregate_table' with 6 columns.
			# dimension1 - dimension3 are columns in the ActiveRecord::Base subclass
			# you want to aggregate by.
			# The final three columns define the calculations you wish you perform 
			# where fact1 and fact2 are columns in the ActiveRecord::Base subclass
			# you wish to calculate on. Counter provides a simple star count which 
			# can enable subsequent calculations to use this table as their data source.
		
			precalculate 'aggregate_table' do |t|
			  t.dimension1
			  t.dimension2
			  t.dimension3
			  t.sum :fact1
			  t.avg :fact2
			  t.counter
			end
			
			# Further calculations ...
		end
	</code>
</pre>

Next, run your precalculations.

<pre>
	<code>
		rake db:precalculate
		
		# OR, to refresh only a subset of your data you can apply conditions ...
		rake db:precalculate["date_dimension >= '2008-01-01 00:00:00'"]
	</code>
</pre>

The above code will create or update the tables specified in the classes inheriting from ActiveRecord::Precalculation you define. If conditions are supplied, they will be applied to tables which understand them. Other tables (or those which are being created for the first time) will not have conditions applied.

The model class you have applied precalculations to is smart enough to know about the aggregate table stack. When @calculate@ is called, the Precalculation module will check to see if the query can be satisfied by any of the aggregate tables. If it can, then the neccessary SQL will be executed on the aggregate table instead of the base.

<pre>
	<code>
		# e.g. for the calculation example given above, the following method
		# would execute a query on the 'aggregate_table' table ...
		
		results = MyModel.calculate :sum_fact1, :dimension1, :dimension2
	</code>
</pre>


h2. A note on precedence

Before executing any of the defined calculations, the Precalculation module will examine them and try to figure out in which order they should be executed. If all the data for one calculation (A) can be accurately determined from the output of another (B), B will be executed first and A will take B as its data source.


h3. Author

"Henry Garner":http://www.quantedit.com

h3. Licence

"MIT":http://www.opensource.org/licenses/mit-license.php